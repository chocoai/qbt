package com.qbt.web.controller;

import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import com.qbt.common.enums.ErrorCodeEnum;
import com.qbt.common.exception.WechatException;
import com.qbt.common.logback.LogCvt;
import com.qbt.common.result.PageResult;
import com.qbt.common.result.Result;
import com.qbt.persistent.entity.ActivityTicketPackage;
import com.qbt.persistent.entity.UserWeixin;
import com.qbt.web.pojo.ticket.UserActivityPackageVo;
import com.qbt.web.pojo.ticket.UserPackageTicketVo;
import com.qbt.web.pojo.ticketPackageActivity.TicketPackageActivityPageReqVo;
import com.qbt.web.pojo.ticketPackageActivity.TicketPackageActivityVo;
import com.qbt.web.pojo.ticketPackageRule.TicketPackageRuleVo;
import com.qbt.web.pojo.ticketpackage.req.TicketPackageReq;
import com.qbt.web.support.LoginSupport;
import com.qbt.web.support.MyTicketPackageSupport;
import com.qbt.web.util.ZxingUtil;

/**
 * @ClassName: MyTicketPackageController
 * @author andy.li
 * @Description: TODO
 */
@Controller
@RequestMapping("/myTicketPackage")
public class MyTicketPackageController {
	
	@Resource
	private MyTicketPackageSupport myTicketPackageSupport;
	
	@Resource
	private LoginSupport loginSupport;
	
	
	/**
	  * @Title: listNotActive
	  * @Description: Search (active_status=0 and package_type=0))
	  * @author: andy.li
	  * @return List<UserActivityPackageVo>
	  */
	@RequestMapping("/listNotActive")
	public Result<List<UserActivityPackageVo>> listNotActive(HttpServletRequest request){
		Result<List<UserActivityPackageVo>> result = new Result<List<UserActivityPackageVo>>();
		try {
			String openid = String.valueOf(request.getAttribute("openid"));
			UserWeixin userWeixin = loginSupport.findByOpenId(openid);
			result.setDatas(myTicketPackageSupport.findlistNotActive(userWeixin.getId()));
		}catch (WechatException e) {
			result.setCode(e.getCode());
			result.setMsg(e.getMsg());
		}catch (Exception e) {
			result.setCode(ErrorCodeEnum.ERROR.getCode());
			result.setMsg(ErrorCodeEnum.ERROR.getMsg());
			LogCvt.error(e.getMessage(),e);
		}
		return result;
	}
	
	
	/**
	  * @Title: listUsed
	  * @Description: Search (active_status=1 or package_type in(1,2) or(active_status=1 and today>expiration_time))
	  * @author: andy.li
	  * @return List<UserActivityPackageVo>
	 */
	@RequestMapping("/listUsed")
	public Result<List<UserActivityPackageVo>> listUsed(HttpServletRequest request){
		Result<List<UserActivityPackageVo>> result = new Result<List<UserActivityPackageVo>>();
		try {
			String openid = String.valueOf(request.getAttribute("openid"));
			UserWeixin userWeixin = loginSupport.findByOpenId(openid);
			result.setDatas(myTicketPackageSupport.findlistUsed(userWeixin.getId()));
		}catch (WechatException e) {
			result.setCode(e.getCode());
			result.setMsg(e.getMsg());
		}catch (Exception e) {
			result.setCode(ErrorCodeEnum.ERROR.getCode());
			result.setMsg(ErrorCodeEnum.ERROR.getMsg());
			LogCvt.error(e.getMessage(),e);
		}
		return result;
	}
	
	/**
	 * @Title: listAvailableTicket
	 * @author: andy.li
	 * @return List<UserPackageTicketVo>
	 */
	@RequestMapping("/listAvailableTicket")
	public Result<List<UserPackageTicketVo>> listAvailableTicket(HttpServletRequest request){
		Result<List<UserPackageTicketVo>> result = new Result<List<UserPackageTicketVo>>();
		try {
			String openid = String.valueOf(request.getAttribute("openid"));
			UserWeixin userWeixin = loginSupport.findByOpenId(openid);
			result.setDatas(myTicketPackageSupport.findlistAvailableTicket(userWeixin.getId()));
		}catch (WechatException e) {
			result.setCode(e.getCode());
			result.setMsg(e.getMsg());
		}catch (Exception e) {
			result.setCode(ErrorCodeEnum.ERROR.getCode());
			result.setMsg(ErrorCodeEnum.ERROR.getMsg());
			LogCvt.error(e.getMessage(),e);
		}
		return result;
		
	}
	
	/**
	 * @Title: listDisableTicket
	 * @author: andy.li
	 * @return List<UserPackageTicketVo>
	 */
	@RequestMapping("/listDisableTicket")
	public Result<List<UserPackageTicketVo>> listDisableTicket(HttpServletRequest request){
		Result<List<UserPackageTicketVo>> result = new Result<List<UserPackageTicketVo>>();
		try {
			String openid = String.valueOf(request.getAttribute("openid"));
			UserWeixin userWeixin = loginSupport.findByOpenId(openid);
			result.setDatas(myTicketPackageSupport.findlistDisableTicket(userWeixin.getId()));
		}catch (WechatException e) {
			result.setCode(e.getCode());
			result.setMsg(e.getMsg());
		}catch (Exception e) {
			result.setCode(ErrorCodeEnum.ERROR.getCode());
			result.setMsg(ErrorCodeEnum.ERROR.getMsg());
			LogCvt.error(e.getMessage(),e);
		}
		return result;
	}
	
	
	/**
	 * @Title: activate
	 * @Description:update active_status  = 1
	 * @param packageId
	 * @param activateUser
	 * @param activatePhoneNumber
	 * @author: andy.li
	 * @return
	 */
	@RequestMapping("/activate")
	public Result<String> activate(@RequestBody TicketPackageReq req){
		Result<String> result = new Result<String>();
		try {
			result.setDatas(myTicketPackageSupport.activate(req.getPackageId(),req.getActivateUser(),req.getActivatePhoneNumber()));
		}catch (WechatException e) {
			result.setCode(e.getCode());
			result.setMsg(e.getMsg());
		}catch (Exception e) {
			result.setCode(ErrorCodeEnum.ERROR.getCode());
			result.setMsg(ErrorCodeEnum.ERROR.getMsg());
			LogCvt.error(e.getMessage(),e);
		}
		return result;
	}
	
	/**
	 * @Title: cancel
	 * @Description:update package_type = 0
	 * @param packageId
	 * @author: andy.li
	 * @return
	 */
	@RequestMapping("/cancel")
	public Result<String> cancel(@RequestBody TicketPackageReq req){
		Result<String> result = new Result<String>();
		try {
			result.setDatas(myTicketPackageSupport.cancel(req.getPackageId()));
		}catch (WechatException e) {
			result.setCode(e.getCode());
			result.setMsg(e.getMsg());
		}catch (Exception e) {
			result.setCode(ErrorCodeEnum.ERROR.getCode());
			result.setMsg(ErrorCodeEnum.ERROR.getMsg());
			LogCvt.error(e.getMessage(),e);
		}
		return result;
	}
	
	
	/**
	 * @Title: recieve
	 * @Description:
	 *  update package_type = 2
		copy a new package to current user
	 * @param 接受方的user name
	 * @param 接受方的user mobile
	 * @param 赠送方的packageId
	 * @param qrCode
	 * @return
	 */
	@RequestMapping("/recieve")
	public Result<String> recieve(HttpServletRequest request,@RequestBody TicketPackageReq req){
		Result<String> result = new Result<String>();
		try {
			String openid = String.valueOf(request.getAttribute("openid"));
			UserWeixin userWeixin = loginSupport.findByOpenId(openid);
			if(userWeixin.getName().equals(req.getRecieveUserName())&&userWeixin.getMobile().equals(req.getRecieveUserMobile())){
				result.setDatas(myTicketPackageSupport.recieve(userWeixin.getId(),userWeixin.getName(),req.getPackageId(),req.getQrCode()));
			}else{
				result.setDatas("无效的接受用户!");
			}
		}catch (WechatException e) {
			result.setCode(e.getCode());
			result.setMsg(e.getMsg());
		}catch (Exception e) {
			result.setCode(ErrorCodeEnum.ERROR.getCode());
			result.setMsg(ErrorCodeEnum.ERROR.getMsg());
			LogCvt.error(e.getMessage(),e);
		}
		return result;
	}
	
	
	/**
	 * @Title: qrcode
	 * @Description: post :package_id (update qrcode to user_activity_package, update package_type = 1)
	 * @param url
	 * @author: andy.li
	 * @return 
	 */
	@RequestMapping("/qrcode")
	public Result<String> qrcode(@RequestBody TicketPackageReq req,HttpServletRequest request){
		Result<String> result=new Result<String>();
		String webpath=request.getSession().getServletContext().getRealPath("/")+"WEB-INF/qrCodeImg/";
		String[] params=ZxingUtil.getParamsByUrl(req.getUrl());
		try {
			if(params!=null){
			result.setDatas(myTicketPackageSupport.qrcode(Integer.parseInt(params[0]),params[1], req.getUrl(), webpath));
			}else{
			result.setDatas("请求参数错误!");
			}
		}catch (WechatException e) {
			result.setCode(e.getCode());
			result.setMsg(e.getMsg());
		}catch (Exception e) {
			result.setCode(ErrorCodeEnum.ERROR.getCode());
			result.setMsg(ErrorCodeEnum.ERROR.getMsg());
			LogCvt.error(e.getMessage(),e);
		}
		//清除tomcat服务器下二维码临时图片
		try {
			ZxingUtil.deletefile(webpath);
		} catch (Exception e) {
			e.printStackTrace();
		}
	
		return result;
	}
	
	
	/**
	 * @Title: useTicket
	 * @Description update table user_package_ticket,set used_quantity+1
	 * @author: andy.li
	 * @param ticketId
	 * @return
	 */
	@RequestMapping("/useTicket")
	public Result<String> useTicket(@RequestBody TicketPackageReq req){
		Result<String> result = new Result<String>();
		try {
			result.setDatas(myTicketPackageSupport.useTicket(req.getTicketId()));
		}catch (WechatException e) {
			result.setCode(e.getCode());
			result.setMsg(e.getMsg());
		}catch (Exception e) {
			result.setCode(ErrorCodeEnum.ERROR.getCode());
			result.setMsg(ErrorCodeEnum.ERROR.getMsg());
			LogCvt.error(e.getMessage(),e);
		}
		return result;
	}
	
	/**
	 * @Title: findPackageById
	 * @Description find details Package info by packageId
	 * @author: andy.li
	 * @param packageId
	 * @return ActivityTicketPackage
	 */
	@RequestMapping("/findPackageById")
	public Result<ActivityTicketPackage> findPackageById(@RequestBody TicketPackageReq req){
		Result<ActivityTicketPackage> result = new Result<ActivityTicketPackage>();
		try {
			result.setDatas(myTicketPackageSupport.findPackageById(req.getPackageId()));
		}catch (WechatException e) {
			result.setCode(e.getCode());
			result.setMsg(e.getMsg());
		}catch (Exception e) {
			result.setCode(ErrorCodeEnum.ERROR.getCode());
			result.setMsg(ErrorCodeEnum.ERROR.getMsg());
			LogCvt.error(e.getMessage(),e);
		}
		return result;
	}
	
	
	/**
	 * @Title: findPaperPackageList
	 * @Description get all paper package list(contain qrcode url)
	 * @author: andy.li
	 * @return
	 */
	@RequestMapping("/findPaperPackageList")
	public Result<List<UserActivityPackageVo>> findPaperPackageList(){
		Result<List<UserActivityPackageVo>> result = new Result<List<UserActivityPackageVo>>();
		try {
			result.setDatas(myTicketPackageSupport.findPaperPackageList());
		}catch (WechatException e) {
			result.setCode(e.getCode());
			result.setMsg(e.getMsg());
		}catch (Exception e) {
			result.setCode(ErrorCodeEnum.ERROR.getCode());
			result.setMsg(ErrorCodeEnum.ERROR.getMsg());
			LogCvt.error(e.getMessage(),e);
		}
		return result;
	}
	
	/**
	 * @Title: packageActivityFindByPage
	 * @Description get activity list
	 * @author: andy.li
	 * @param reqVo
	 * @return
	 */
	@RequestMapping("/packageActivityFindByPage")
	public PageResult<List<TicketPackageActivityVo>> packageActivityFindByPage(@RequestBody TicketPackageActivityPageReqVo reqVo){
		
		PageResult<List<TicketPackageActivityVo>> result = new PageResult<List<TicketPackageActivityVo>>();
		try{
			
			List<TicketPackageActivityVo> ticketPackageActivitys = myTicketPackageSupport.packageActivityFindByPage(reqVo);
			
			if(ticketPackageActivitys != null) {
				for(TicketPackageActivityVo ticketPackage: ticketPackageActivitys) {
					try {
						TicketPackageRuleVo ticketPackageRuleVo = myTicketPackageSupport.packageActivityFindByRuleId(ticketPackage.getRuleId());
						ticketPackage.setTicketPackageRule(ticketPackageRuleVo);
					} catch (Exception e) {
						LogCvt.error(e.getMessage(), e);
					}
				}
			}
			result.setDatas(ticketPackageActivitys);
			result.setPage(reqVo);
		}catch(Exception e)
		{
			String errMsg = "券包活动查询异常";
			LogCvt.error(errMsg, e);
			result.setCode(ErrorCodeEnum.ERROR_SYS.getCode());
			result.setMsg(errMsg);
		
		}
		return result;
	}

}
