package com.qbt.web.support.impl;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.qbt.bussiness.support.WechatMessageSupport;
import com.qbt.common.entity.PageEntity;
import com.qbt.common.enums.ErrorCodeEnum;
import com.qbt.common.enums.PayStatus;
import com.qbt.common.enums.PaymentStatus;
import com.qbt.common.enums.PaymethodEnum;
import com.qbt.common.enums.UnifiedOrderTradeType;
import com.qbt.common.exception.BusinessException;
import com.qbt.common.exception.WechatException;
import com.qbt.common.logback.LogCvt;
import com.qbt.common.util.DateUtil;
import com.qbt.common.util.JSonUtil;
import com.qbt.persistent.entity.TicketPackageActivity;
import com.qbt.persistent.entity.TicketPackagePayment;
import com.qbt.persistent.entity.TicketPackageRuleConfig;
import com.qbt.persistent.entity.UserActivityOrder;
import com.qbt.persistent.entity.UserActivityOrderDetail;
import com.qbt.persistent.entity.UserActivityPackage;
import com.qbt.persistent.entity.UserPackageTicket;
import com.qbt.persistent.entity.UserWeixin;
import com.qbt.service.CommonService;
import com.qbt.service.TicketPackageActivityService;
import com.qbt.service.TicketPackagePaymentService;
import com.qbt.service.TicketPackageRuleConfigService;
import com.qbt.service.UserActivityOrderDetailService;
import com.qbt.service.UserActivityOrderService;
import com.qbt.service.UserActivityPackageService;
import com.qbt.service.UserPackageTicketService;
import com.qbt.service.UserWeixinService;
import com.qbt.web.pojo.ticketPackagePayment.TicketPackagePaymentRequest;
import com.qbt.web.support.TicketPackagePyamentSupport;
import com.qbt.wechat.api.WechatApi;
import com.qbt.wechat.entity.UnifiedOrderRequest;
import com.qbt.wechat.entity.UnifiedOrderResponse;

@Service
public class TicketPackagePyamentSupportImpl implements TicketPackagePyamentSupport {

	@Value("${sc.env}")
	private boolean isScEnv = true;
	@Value("${ticket_package_notify_url}") // TODO add it to configure
	private String notifyUrl;
	@Resource
	private WechatApi wechatApi;
	@Resource
	private TicketPackagePaymentService ticketPaymentService;
	@Resource
	private CommonService commonService;
	@Resource
	private WechatMessageSupport wechatMessageSupport;
	@Resource
	private UserWeixinService userWeixinService;
	@Resource
	private UserActivityOrderService userActivityOrderService;
	@Resource
	private TicketPackageActivityService ticketPackageActivityService;
	@Resource
	private TicketPackageRuleConfigService ticketPackageRuleConfigService;
	@Resource
	private UserActivityOrderDetailService userActivityOrderDetailService;
	@Resource
	private UserActivityPackageService userActivityPackageService;
	@Resource
	private UserPackageTicketService userPackageTicketService;
	
	@Override
	public Map<String, String> pay(TicketPackagePaymentRequest payRequest) {
		
		int payExpireTime = 15 * 60;
		Date startTime = new Date();
		Date expireTime = new Date(startTime.getTime() + (payExpireTime * 1000));

		String payno = commonService.createTicketPackagePaymentId();
		UnifiedOrderRequest wechatRequest = new UnifiedOrderRequest();
		wechatRequest.setBody("券包购买下单支付");
		wechatRequest.setOutTradeNo(payno);
		if(isScEnv){
			wechatRequest.setTotalFee(String.valueOf(payRequest.getPayAmount()));
		}else{
			wechatRequest.setTotalFee("0.01");
		}
		
		wechatRequest.setTimeStart(DateUtil.formatDate(startTime, "yyyyMMddHHmmss") );
		wechatRequest.setTimeExpire(DateUtil.formatDate(expireTime, "yyyyMMddHHmmss"));
		wechatRequest.setOpenid(payRequest.getOpenid());
		wechatRequest.setSpbillCreateIp("127.0.0.1");
		//回调地址赋值
		wechatRequest.setNotifyUrl(notifyUrl);

		UnifiedOrderResponse response = wechatApi.unifiedOrder(wechatRequest, UnifiedOrderTradeType.JSAPI);
		
		if("FAIL".equals(response.getReturn_code())){
			throw new WechatException(ErrorCodeEnum.ERROR_VALID_FAIL, response.getReturn_msg());
		}
		
		/**
		 * ticketPackage订单组装
		 */
		
		TicketPackagePayment ticketPackagePayment = new TicketPackagePayment();
		
		ticketPackagePayment.setActivityAmount(payRequest.getActivityAmount());
		ticketPackagePayment.setActivityName(payRequest.getActivityName());
		
		ticketPackagePayment.setCreateTime(new Date());//创建时间
		ticketPackagePayment.setUpdateTime(new Date());//更新时间
		
		ticketPackagePayment.setUuid(payno);
		
		ticketPackagePayment.setOrderId(payRequest.getOrderId());
		ticketPackagePayment.setUserId(payRequest.getUserId());
		
		ticketPackagePayment.setPayAmount(payRequest.getPayAmount());//支付金额
		ticketPackagePayment.setPayMethod(PaymethodEnum.weixin_pay.getCode());//1-微信支付2-boss购买
		
		ticketPackagePayment.setStatus(PaymentStatus.ready.getCode());//1-预支付 2-支付成功 3-支付失败 4-异常
		ticketPackagePayment.setPayStatus(PayStatus.init.getCode());//1-初始化 2-成功 3-失败
		
		ticketPackagePayment.setPaySign(wechatRequest.getSign());
		ticketPackagePayment.setPrepayId(response.getPrepay_id());
		
		ticketPackagePayment.setStartTime(startTime.getTime());
		ticketPackagePayment.setExpireTime(expireTime.getTime());
		ticketPackagePayment.setPaypackage(JSonUtil.toJSonString(response.getPaypackage()));
		
		ticketPaymentService.insert(ticketPackagePayment);
		
		return response.getPaypackage();
	}

	@Override
	public TicketPackagePayment findByUuid(String uuid) {
		return ticketPaymentService.findByUuid(uuid);
	}

	@Override
	public void updatePayment(TicketPackagePayment payment) {
		ticketPaymentService.updateById(payment);
		
		//下推微信通知 TODO 微信下发
		//wechatMessageSupport.ticketPackageSuccessPayNotify(vipInfo);
	}
	
	/**
	 * 创建ticketPackage
	 * @param orderId
	 */
	@Override
	public void createTicketPackageAfterPaid(int orderId) {
		UserActivityOrder order = userActivityOrderService.findById(orderId);
		
		if(order == null || (order.getPayStatus() != null && order.getPayStatus() == 1)) {
			LogCvt.error("订单不存在或者已经支付成功： orderId: "+ orderId);
			return;
		}
		
		// 更改订单支付状态
		order.setPayStatus(1);
		userActivityOrderService.update(order);
		
		// 根据券包的活动，获取礼包和礼券的信息
		int activityId = order.getActivityId();
		
		//获取券包活动
		TicketPackageActivity ticketPackageActivity = ticketPackageActivityService.findById(activityId);
		int ruleId = ticketPackageActivity.getRuleId();
		//获取券包活动的配置
		List<TicketPackageRuleConfig> ticketPackageRuleConfigs = ticketPackageRuleConfigService.findByRuleId(ruleId);
		
		PageEntity<UserActivityOrderDetail> pageEntity = new PageEntity<UserActivityOrderDetail>();
		UserActivityOrderDetail condition = new UserActivityOrderDetail();
		condition.setOrderId(orderId);		
		pageEntity.setCondition(condition);
		List<UserActivityOrderDetail> details = userActivityOrderDetailService.findByPage(pageEntity);
		
		UserWeixin userWeixin = userWeixinService.findById(order.getUserId());
		
		if(details != null) {
			for(UserActivityOrderDetail detail: details) {
				int orderDetailId = detail.getId();
				
				// 自动激活
				if(order.getBuyActive() == 1) {
					
					detail.setActivateUser(userWeixin.getName());
					detail.setActivatePhoneNumber(userWeixin.getMobile());
					detail.setActivateTime(new Date());
					detail.setActiveStatus(1);
					detail.setPackageType(0);
					
					userActivityOrderDetailService.update(detail);
				}
				
				// 创建用户券包 into user_activity_package
				UserActivityPackage userActivityPackage = new UserActivityPackage();
				userActivityPackage.setUserId(order.getUserId());
				userActivityPackage.setOrderId(orderId);
				userActivityPackage.setOrderDetailId(orderDetailId);

				userActivityPackage.setStatus(1);
				userActivityPackage.setCreateTime(new Date());
				userActivityPackage.setUpdateTime(new Date());

				userActivityPackage.setOperatorId(order.getOperatorId());
				userActivityPackage.setOperatorName(order.getOperatorName());

				int userActivityPackageId = userActivityPackageService.insert(userActivityPackage);

				// 根据活动规则配置创建用户券包
				if (ticketPackageRuleConfigs != null) {
					for (TicketPackageRuleConfig config : ticketPackageRuleConfigs) {
						UserPackageTicket userPackageTicket = new UserPackageTicket();
						userPackageTicket.setOrderDetailId(orderDetailId);
						userPackageTicket.setPackageId(userActivityPackageId);

						userPackageTicket.setTicketName(config.getTicketName());
						userPackageTicket.setTicketPrice(config.getTicketPrice());
						userPackageTicket.setQuantity(config.getQuantity());
						userPackageTicket.setUsedQuantity(0);
						userPackageTicket.setUseLimit(config.getUseLimit());
						userPackageTicket.setUseStatus(0);

						userPackageTicket.setCreateTime(new Date());
						userPackageTicket.setUpdateTime(new Date());

						userPackageTicketService.insert(userPackageTicket);
					}
				}
			}
		}
		
	}

}
